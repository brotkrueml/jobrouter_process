.. include:: _includes.txt

.. _form-finisher:

=============
Form Finisher
=============

Target group: **Integrators**, **Developers**


Start Instances
===============

Start One Instance
------------------

A form finisher `JobRouterStartInstance` is available to start a JobRouter
process instance. After submitting a form, the form values are stored in a
transfer table. A command, hopefully executed regularly, takes these transfer
records and start a process instance. This is due the fact, that a JobRouter
installation can temporarily not available due to maintenance or network
problems. Also the submitting of a form should be as fast as possible.

.. note::

   The finisher can only be used in the form definition directly, not in the
   :guilabel:`Form` module.

So, let's start with an example. The form finisher is defined in the YAML
configuration of the specific form:

.. code-block:: yaml

   finishers:
      -
         identifier: JobRouterStartInstance
         options:
            handle: 'start_website_contact'
            summary: 'Demo Contact'
            processtable:
               name:
                  mapOnFormField: name
               company:
                  mapOnFormField: company
               email_address:
                  mapOnFormField: email
               phone_number:
                  mapOnFormField: phone
               message:
                  mapOnFormField: message
               form_identifier:
                  staticValue: 'www.example.com/demo'

As you can see, you can define some options. These are:

- `handle` (required): The step handle defined in the
  :ref:`Processes module <module-create-step-link>`.

- `summary`: The summary of the instance.

- `initiator`: The initiator of the instance.

- `username`: The username the instance should be assigned to.

- `jobfunction`: The Job Function the instance should be assigned to.

- `priority`: The priority of the instance (number between 1 and 3).

- `pool`: The pool of the instance (positive number).

- `processtable`: You can map the form fields to the process table fields. As
  you can see in the example above, you define first the process table field
  (e.g `email_address`) and the map it with the key `mapOnFormField` to the
  form field. Alternatively, you can also set a static value.

.. note::

   Only process table fields can be used that are configured in the
   :ref:`process link <module-create-process-link>`.


Start Multiple Instances
------------------------

It is also possible to start multiple instances – even on different JobRouter
installations. Just use the array notation in :yaml:`options`:

.. code-block:: yaml

   finishers:
      -
         identifier: JobRouterStartInstance
         options:
            -
               handle: 'start_website_contact'
               summary: 'Demo Contact'
               processtable:
                  name:
                     mapOnFormField: name
                  company:
                     mapOnFormField: company
                  email_address:
                     mapOnFormField: email
                  phone_number:
                     mapOnFormField: phone
                  message:
                     mapOnFormField: message
                  form_identifier:
                     staticValue: 'www.example.com/demo'
            -
               handle: 'collect_anonymous_messages'
               summary: 'Demo Contact'
               processtable:
                  ANON_MESSAGE:
                     mapOnFormField: message
                  FROM_URL:
                     staticValue: 'https://www.example.com/demo'


Variables
---------

You can use variables in the common parameters, such as :yaml:`summary` or
:yaml:`initiator`, and in the process table fields that map to a static value.

Variables look like: :yaml:`{__variableName}`.

Currently, one variable is available:

Transfer Identifier
~~~~~~~~~~~~~~~~~~~

The transfer identifier is generated from the form identifier and a unique key
to identify associated transfers – as you can start multiple instances from one
form. The identifier is stored in a column in the transfer table together with
the form data. This is useful if you want to check the data from the instance
against the original data from the form.

The identifier looks like this: `form_demo-20_63fca23b1accb` where `form`
indicates the identifier is generated by a from finisher, `demo-20` is the form
identifier with the content element uid of the form plugin and `63fca23b1accb`
is the unique key.

Use the :yaml:`{__transferIdentifier}` variable to add the transfer identifier:

.. code-block:: yaml

   finishers:
      -
         identifier: JobRouterStartInstance
         options:
            handle: 'start_website_contact'
            summary: 'Demo Contact ({__transferIdentifier})'
            processtable:
               name:
                  mapOnFormField: name
               company:
                  mapOnFormField: company
               email_address:
                  mapOnFormField: email
               phone_number:
                  mapOnFormField: phone
               message:
                  mapOnFormField: message
               form_identifier:
                  staticValue: '{__transferIdentifier}'
